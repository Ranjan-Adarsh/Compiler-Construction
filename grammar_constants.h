/**
MANAF - 2019B3A70351P
ADARSH - 2019B3A70443P
NISHANT - 2019B3A70381P
**/
#ifndef COMPILER_GRAMMAR_CONSTANTS_H
#define COMPILER_GRAMMAR_CONSTANTS_H
#define N_TERMINALS 60
#define N_NON_TERMINALS 74
#define N_ACTIONS 100
#define N_KEYWORDS 31

#include "hashmap.h"
#include "string_def.h"

#define ACTIONS_BEGIN (N_TERMINALS + N_NON_TERMINALS)
#define ACTIONS_END (ACTIONS_BEGIN + N_ACTIONS - 1)

#define MAX_TERMINAL_SIZE 24
#define MAX_NON_TERMINAL_SIZE 24
#define TERMINALS_BEGIN 0
#define TERMINALS_END (N_TERMINALS - 1)
#define NON_TERMINALS_BEGIN N_TERMINALS
#define NON_TERMINALS_END (N_TERMINALS + N_NON_TERMINALS - 1)

#define is_terminal(symbol) ((symbol) >= TERMINALS_BEGIN && (symbol) <= TERMINALS_END)
#define is_non_terminal(symbol) ((symbol) >= NON_TERMINALS_BEGIN && (symbol) <= NON_TERMINALS_END)
#define is_action(symbol) ((symbol) >= ACTIONS_BEGIN && (symbol) <= ACTIONS_END)


typedef enum Terminal {
    PLUS = 0,
    MINUS,
    MUL,
    DIV,
    LT,
    GT,
    COLON,
    RANGEOP,
    SEMICOLON,
    COMMA,
    SQBO,
    SQBC,
    BO,
    BC,
    LE,
    GE,
    EQ,
    NE,
    DEF,
    ENDDEF,
    ASSIGN_OP,
    COMMENTMARK,
    DRIVERDEF,
    DRIVERENDDEF,
    ID,
    NUM,
    RNUM,
    INTEGER,
    REAL,
    BOOLEAN,
    OF,
    ARRAY,
    START,
    END,
    DECLARE,
    MODULE,
    DRIVER,
    PROGRAM,
    GET_VALUE,
    PRINT,
    USE,
    WITH,
    PARAMETERS,
    TAKES,
    INPUT,
    RETURNS,
    FOR,
    IN,
    SWITCH,
    CASE,
    BREAK,
    DEFAULT,
    WHILE,
    AND,
    OR,
    TRUE,
    FALSE,
    INVALID,
    DOLLAR,
    EPSILON
} Terminal;

typedef enum Non_Terminal {
    Pro = N_TERMINALS,
    moduleDeclarations,
    otherModules,
    driverModule,
    moduleDeclaration,
    module,
    moduleDef,
    driverModuleDef,
    inputParameterList,
    ZInputParameterList,
    returnList,
    outputParameterList,
    ZOutputParameterList,
    dataType,
    arrayDataType,
    range,
    statements,
    statement,
    ioStatement,
    simpleStatement,
    declareStatement,
    conditionalStatement,
    iterativeStatement,
    Nconst,
    booleanConstant,
    Numorrnum,
    assignmentStatement,
    moduleUseStatement,
    whichAssignment,
    leftValueId,
    leftValueArray,
    Expr,
    arrayIndex,
    arrayExpression,
    ZArrayExpression,
    arrayTerm,
    ZArrayTerm,
    arrayFactor,
    Opt,
    idList,
    arithmeticExpression,
    ZArithmeticExpression,
    arithmeticTerm,
    ZArithmeticTerm,
    arithmeticFactor,
    logicalOperator,
    relationalOperator,
    caseStatement,
    default1,
    caseValue,
    caseStatements,
    addSubOp,
    mulDivOp,
    Sign,
    ZIdList,
    numOrId,
    remainingRange,
    forRange,
    arithmeticOrBooleanExpression,
    unaryExpression,
    unaryOperator,
    unaryTerm,
    booleanTerm,
    ZArithmeticOrBooleanExpression,
    ZBooleanTerm,
    itemInPrint,
    Prarr,
    arrayBracket,
    parameterList,
    Zparal,
    K,
    iplDataType,
    idlDataType,
} Non_Terminal;

typedef enum Action {
    ACTION1 = N_TERMINALS + N_NON_TERMINALS,
    ACTION2,
    ACTION3,
    ACTION4,
    ACTION5,
    ACTION6,
    ACTION7,
    ACTION8,
    ACTION9,
    ACTION10,
    ACTION11,
    ACTION12,
    ACTION13,
    ACTION14,
    ACTION15,
    ACTION16,
    ACTION17,
    ACTION18,
    ACTION19,
    ACTION20,
    ACTION21,
    ACTION22,
    ACTION23,
    ACTION24,
    ACTION25,
    ACTION26,
    ACTION27,
    ACTION28,
    ACTION29,
    ACTION30,
    ACTION31,
    ACTION32,
    ACTION33,
    ACTION34,
    ACTION35,
    ACTION36,
    ACTION37,
    ACTION38,
    ACTION39,
    ACTION40,
    ACTION41,
    ACTION42,
    ACTION43,
    ACTION44,
    ACTION45,
    ACTION46,
    ACTION47,
    ACTION48,
    ACTION49,
    ACTION50,
    ACTION51,
    ACTION52,
    ACTION53,
    ACTION54,
    ACTION55,
    ACTION56,
    ACTION57,
    ACTION58,
    ACTION59,
    ACTION60,
    ACTION61,
    ACTION62,
    ACTION63,
    ACTION64,
    ACTION65,
    ACTION66,
    ACTION67,
    ACTION68,
    ACTION69,
    ACTION70,
    ACTION71,
    ACTION72,
    ACTION73,
    ACTION74,
    ACTION75,
    ACTION76,
    ACTION77,
    ACTION78,
    ACTION79,
    ACTION80,
    ACTION81,
    ACTION82,
    ACTION83,
    ACTION84,
    ACTION85,
    ACTION86,
    ACTION87,
    ACTION88,
    ACTION89,
    ACTION90,
    ACTION91,
    ACTION92,
    ACTION93,
    ACTION94,
    ACTION95,
    ACTION96,
    ACTION97,
    ACTION98,
    ACTION99,
    ACTION100,
} Action;

extern const char *KEYWORDS[];
extern const char *SYMBOL_TO_STRING[];
#endif //COMPILER_GRAMMAR_CONSTANTS_H
