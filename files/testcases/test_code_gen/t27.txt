**Code Generation test case 3: Computing expressions using integer, boolean and static array data types**

**Single driver module with single level nesting **

<<<driver program>>>
start
	declare x, y, z:integer;
	declare a, b, c:integer;
	declare u, v: boolean;
	declare A: array[-3..2] of integer;
	u:= true;
	a:= 5;
	b:= 9;
	get_value(x);
	get_value(y);
	z:= x + y*b +(a-b)*y+ a*2 - b*x; 2 + 27 + -4*3 + 10 - 9*2 =
	v:= z > 10 OR a<=b AND x<y AND u;	**follows left to right associativity**
    print(z);
	print(v);
	get_value(A);

**Note: Implement get_value(A) using type information of A. Your code template should first inform user of the size, range indices and type of data and read accordingly to populate the memory locations allocated for elements of A**

    y:= a+x+A[0]*2 + A[1]*3 +A[-3]; ** 7 + 18 + 30 + 12 **
                    **bound checking at compile time must have been done before code generation**
	print(y);
	print(A);

end

** Expected output

For values of x = 2 and y = 3 as run time input, print z as 9.
Then print v as true (use string true or false to print output of a variable of boolean type).
Read array element values as 12, 4, -8, 9, 10, -18 as shown below and then print the values of A - all elements of A one after the other

On the console your output should appear in new line for each print as shown below

Output: 9
Output: true
Input: Enter 6 array elements of integer type for range -3 to 2
12  ; -3
4  ; -2
-8 ; -1
9 ; 0
10 ; 1
-18 ; 2
Output: 67
Output: 12 4 -8 9 10 -18


Similarly run the generated assembly code for other input values and verify.

**
